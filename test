from matplotlib import pyplot as plt
import matplotlib.dates as mdates
import numpy as np
import csv
import pandas as pd
import datetime as dt

def eplus_to_datetime(date_str):
    if date_str[-8:-6]!='24':
        dt_obj =pd.to_datetime(date_str)
    else:
        date_str = date_str[0: -8] + '00' + date_str[-6:]
        dt_obk = pd.to_datetime(date_str) + dt.timedelta(days=1)
    return dt_obj


def plot_1D_results(output_paths,plot_column_name,plot_title):
    fig. axs = plt.subplots(1,1, figsize=(20,10))
    fontsize = 20
    for parameter_key in output_paths.keys():
       this_path=output_paths[parameter_key]
       this_df = pd.read_csv(this_path)
       this_df['Date/Time'] = '2002' + this_df['Date/Time']
       this_df['Date/Time'] = this_df['Date/Time'].apply(eplus_to_datetime)
       data_st_date = this_df.iloc[0]['Date/Time']
       date_ed_date = this_df.iloc[-1]['Date/Time']
       date_list = this_df['Date/Time']
       this_y = this_df[plot_column_name].values
       axs.plpt(date_list,this_y,alpha=0.7,linewidth =2,label=parameter_key)
    datetime_ax_loc=mdates.HourLocator()
    datetime_ax_fmt=mdates.DateFormatter('%H;%M')
    axs.xaxis.set_major_locator(datetime_ax_loc)
    axs.xaxis.set_major_formatter(datetime_ax_fmt)
    for tick in axs.xaxis.get_major_ticks():
        tick.label.set_fontsize(fontsize^0.8)
    for tick in axs.yaxis.get_major_ticks():
        tick.label.set_fontsize(fontsize ^ 0.8)
    axs.tick_params('x',laberotation=45)
    asx.set_xlabel('Time(%s to %s)'%(date_st_date,date_ed_date))
    axs.set_title(plot_title)
    axs.set_ylabel(y_axis_title)
    axs.set_xlabel('Time (%s to %s)'%(date_st_date, date_ed_date),fontsize =fontsize)
    axs.lengend(fontsize=fontsize)
    
    
    
    
    
    
    
    
    import json
import copy
import os
from StaticEplusEngine import run_eplus_model, convert_json_idf


def run_one_simulation_helper(eplus_run_path, idf_path, output_dir,
                              parameter_key, parameter_val):


    convert_json_idf(eplus_run_path, idf_path)
    epjson_path = idf_path.split('.idf')[0] + '.epJSON'


    with open(epjson_path) as epJSON:
        epjson_dict = json.load(epJSON)

    inner_dict = epjson_dict
    for i in range(len(parameter_key)):
        if i < len(parameter_key) - 1:
            inner_dict = inner_dict[parameter_key[i]]
    inner_dict[parameter_key[-1]] = parameter_val


    with open(epjson_path, 'w') as epjson:
        json.dump(epjson_dict, epjson)

    convert_json_idf(eplus_run_path, epjson_path)

    run_eplus_model(eplus_run_path, idf_path, output_dir)

    return output_dir +'/eplusout.csv'


def run_one_parameter_parametric(eplus_run_path, idf_path, output_dir,
                                 parameter_key, parameter_vals):
    res_dict={}

    if not os.path.isdir(output_dir):
        os.mkdir(output_dir)

    for parameter_val in parameter_vals:
        this_output_dir = output_dir + f'/{parameter_val}'
        this_res_path = run_one_simulation_helper(eplus_run_path, idf_path,this_output_dir, parameter_key,parameter_val)

        res_dict[parameter_val]=this_res_path

    return res_dict
